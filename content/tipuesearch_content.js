var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 網際內容管理 - Web Content Management \n 學員作業網站:\xa0 https://mdewcm2025. github.io /hw-41323103 \n 學員作業倉儲:  https://github.com/mdewcm2025/hw-41323103 \n \n 課程代號: wcm2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 87b7bbx \n \n 課程評分: \n 1. 作業 (40%): 從 Github Classroom 取得的個人倉儲與網站, 每週必須至少提交 2 次與課程進度有關的內容. \n 作業一 (20%): 採用  nginx  建立全球資訊網伺服器 \n 在 Windows 操作系統中建立一台 WWW 伺服器 \n 在 Ubuntu 操作系統建立一台 WWW 伺服器 \n 在 虛擬主機上建立一台 WWW 伺服器 (Windows and Ubuntu) \n Virtualbox \n Vmware  最近宣布 適用於 Windows 及 Linux 的 Vmware Workstation Pro ( 17.6 ), 與適用於 MacOS 的 Vmware Fusion Pro 全面免費. \n 下載 Vmware Workstation Pro  (For Windows and Linux) - 註冊帳號後下載 VMware-workstation-full-17.6.2.exe \n 下載 Vmware Fusion Pro  (For Mac) - 註冊帳號後下載 \n 作業二 (20%): 在各種不同環境下的操作系統中配置  Reeborg\'s world \xa0( 原始碼 ) \n 2. 期中協同專案執行、簡報與報告 (三人一組) (30%) \n 專案題目: 利用 Copilot 解析  Reeborg\'s world \xa0( 原始碼 ) \n 3. 期末協同專案執行、簡報與報告\xa0(三人一組) (30%) \n 專案題目: 網際內容管理架構下的  Reeborg\'s world \xa0( 原始碼 ) \n 利用 uwsgi 配置分組學員執行 cmsimde 動態內容管理系統編輯 \n 設法將  Reeborg\'s world \xa0( 原始碼 ) 與 cmsimde 網際內容管理系統整合 \n', 'tags': '', 'url': 'About.html'}, {'title': 'Git', 'text': '', 'tags': '', 'url': 'Git.html'}, {'title': 'w1', 'text': 'git 指令與 github 倉儲練習: \n 以下練習將利用電腦輔助設計室中 C: 既有的可攜程式環境, 在近端建立一個 git 倉儲, 然後與 Github 上空白的倉儲進行對應. 完成後使用者可在多個地點將 Github 上的倉儲以 git clone 取下進行改版. 當近端某一舊倉儲版本落後 Github 上倉儲版本時, 則可利用 git pull 取下遠端新增的版本資料後繼續改版. 完成後再新增提交推送至 Github 倉儲. \n 練習步驟: \n 點選 C:\\ 中舊版的可攜程式中的 start_ipv6.bat  (點選自己USB的portable_wcm2025，然後點選start.bat) \n 啟動之後, 在其中一個命令列式視窗中執行下列指令: \n \n Y:\\>cd tmp\nY:\\tmp>mkdir w1\nY:\\tmp>cd w1\nY:\\tmp\\w1>git init \n 上列指令第一行是利用 cd 更換目錄指令, 將工作目錄從 Y 槽的根目錄更換到 tmp 目錄,  cd 是 change directory  的意思 \n 第二行則利用 mkdir 建立 w1 目錄,  mkdir 是 make directory  的意思 \n 第三行再利用 cd 將目錄更換到 w1 \n 第四行則在 w1 目錄中執行 git init 指令, 表示已經可以在可攜程式搜尋路徑中執行 portablegit 中的 git.exe, 並要求執行  init, 也就是 initialize 的意思 , 將此目錄起始作為 git 倉儲, 執行 git init 之後, git 會在 w1 目錄中建立一個  .git 目錄 , 其中帶有 git 所需的設定檔案, 與存放版本資料的資料架構. \n 將 w1 目錄設定為 git 倉儲目錄之後, 就可以在 w1 目錄中儲存檔案, 每次改版或重要改版階段完成之後, 可以再利用 git 指令對改版內容進行: 新增 - 提交 - 推送等流程, 版本新增指令為 git add, 提交為 git commit, 而推送則為 git push \n git add 指令會將改版的資料放入暫存區, 準備進行提交, 而提交過程需要綁定修改者的資訊, 最後推送則需要推送者連通至遠端系統間的認證資訊. 實際操作指令如下: \n \n git add .\ngit commit -m "提交訊息"\ngit push \n 我的USB中有將這三行濃縮的指令 \n \n 指令可改為： \n acp "提交訊息" \n 但由於截至目前, 還沒有註記使用者的帳號與電子郵箱, 也還沒有設定推送的目的地, 因此先在可攜系統中設定使用者帳號: \n 範例：git config --global user.name "your github account" git config --global user.name "41323103" \n 接著設定電子郵箱: \n 範例：git config --global user.email "your email" git config --global user.email "41323103@nfu.edu.tw" \n 上面所執行的 git config 因為額外加入 --global, 因此會將設定內容存入可攜系統的 home_ipv6 目錄中, 設定檔案的名稱為 .gitconfig \n 接下來, 為了要將近端 git 倉儲推向 github.com, 必須先登入 github.com, 然後建立一個完全空白的倉儲, 之後再執行下列指令: \n \n git branch -M main\ngit remote add origin git@session_name:github_account/w1.git\ngit push -u origin main \n (將第二行改為：git remote add origin git@41323103:41323103/w1.git) \n 上列指令的第一行必須在 w1 目錄中執行, 表示要將主分支的名稱設為 main. \n 第二行則針對此倉儲建立一個遠端對應名稱 origin, 其遠端網址為隨後的網址, 若此時要使用 SSH 連線, 且已經設定好電腦登錄資料庫中的 session_name, 且登入 github.com 的帳號名稱為 github_account, 則此遠端倉儲的網址設定為: \xa0 git@session_name:github_account/w2.git \n 意思是: 採 SSH 認證時, 必須採 git 作為遠端登入 github.com 的共同帳號, 然後根據隨後的 session_name 找到對應的連線網址 (此時是 github.com), SSH 協定近端的 key 位置, 以及是否需要使用 proxy 設定等資訊. \n \n 執行 git remote add 指令後, 此一資訊會寫入 w1 倉儲中 .git 目錄中的 config 檔案中. 此一指令寫入的資料如下: \n \n [remote "origin"]\n\xa0\xa0\xa0\xa0url = git@session_name:github_account/w1.git\n\xa0\xa0\xa0\xa0fetch = +refs/heads/*:refs/remotes/origin/*\n \n 上列指令的最後一行則是用 origin 代表遠端倉儲的網址, 然後將此網址的 main 分支設為之後 git push 指令的內定分支, 也就使用了 git push 指令中的 -u 設定, 此 u 代表 upstream, 也就是設定完成後, git 會將此設定寫入倉儲 .git/config\xa0 檔案中, 將 remote origin 中的 main 分支作為本地分支的上游. \n 換句話說, 執行 git push -u origin main 指令時, Git 會在 w1 倉儲中的 .git/config 檔案中寫入追蹤分支的相關資訊. 也就是會在 .git/config 檔案中的 [branch "main"] 區塊加入 remote 和 merge 設定, 讓近端 w1 倉儲的 main 分支與遠端倉儲 origin 上的 main 分支進行串接. .git/config 檔案中寫入的內容如下: \n \n [branch "main"]\n\xa0\xa0\xa0\xa0remote = origin\n\xa0\xa0\xa0\xa0merge = refs/heads/main \n \n \n \n SSH 使用設定: \n 在 Windows 操作系統中可以採用 Putty 設定 SSH 協定認證過程中, 登錄至 Github key server 中所需的 OpenSSH 格式鑰匙 (此鑰匙稱為 public key, 也可以將其視為進入 github.com 門上的鎖頭, 因為大家從外面就可以看得到), 另外 Putty 建立 public key 同時, 在近端可以儲存與公鑰認證對應的 private key, 也就是私鑰, 而此私鑰的格式則是 Putty 特有的檔案格式, 因此存為 .ppk, 也就是 putty private key 的意思. \n 通常在帶有還原卡的電腦上工作, 此把私鑰會存在隨身碟中, 並在啟動可攜程式環境之後, 將私鑰相關設定的 session 透過 .reg 檔案存回 Windows 操作系統的登錄檔案中. 而這個 Putty session 的設定登錄檔案將會被存入 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 中. 因此設定完成後必須將此登錄檔匯出, 並在下一次啟動可攜程式環境時匯入. 若不是在帶有還原卡的電腦上進行設定, 則只需要設定一次便可使用. \n \n \n \n \n \n', 'tags': '', 'url': 'w1.html'}, {'title': 'Tasks', 'text': '', 'tags': '', 'url': 'Tasks.html'}, {'title': 'task1', 'text': '自行製作可攜程式系統 \n 此作業的目的在展示如何利用既有的 Python 可攜系統建立各版本的 Python 可攜環境. \n 以下為操作步驟: \n \n 下載 \xa0 portable_python311.7z , 展開後是一套尚未安裝 pip 的 Python 3.11 可攜程式環境. \n 雙點擊 portable_python311 目錄中的 start_ipv6.bat 啟動可攜系統, 在 SciTE 中開啟 Y:\\ gen_python313.py , 以下拉式功能表 Tools - Go 執行, 便可在 Y:\\ 建立 Python313 目錄. \n 接著修改 start_ipv6.bat, 利用 Search - Replace, Find 欄位填上 Python311, Replace 欄位填上 Python313 後, 按下 Replace All, 便可將啟動檔中所有 Python311 設定改為 Python313, 另存修改後的檔案為 start_python313.bat. \n 接下來以 stop.bat 關閉 start_ipv6.bat 開啟的可攜系統, 改以心建立的 start_python313.bat 開啟可攜環境, 之後在命令列輸入 python, 確認目前的 Python 版本為 3.13.2 後, 利用 Ctrl + z 退出 Python 後, 利用 pip list 確認目前的 Python 3.13.2 系統尚未配置 pip 模組管理工具. \n 在命令列中, 以 python get-pip.py 安裝 pip 工具, 完成後, 以 pip list 確認 pip.exe 已經配置完成. \n 最後在命令列中, 以 pip install flask flask_cors bs4 lxml pelican markdown 安裝 cmsimde 網際內容管理系統啟動所需的 Python 模組後, 此可攜系統中的 Python 3.13.2 套件已經可以用來維護個人作業倉儲與分組倉儲. \n 之後利用新版的 \xa0 SciTE , \xa0 Portablegit , \xa0 PUTTY , \xa0 ShareX , \xa0 Wink , \xa0 Solvespace , \xa0 Zoomit , \xa0 ProcessExplorer \xa0 以及原有的 tmp 及 home_ipv6, 以新的 start_python313 啟動. \n \n 以下為操作影片: \n 網際內容管理task1操作影片 \n \n', 'tags': '', 'url': 'task1.html'}, {'title': 'task2', 'text': '使用 SSH 協定執行作業倉儲的推送 \n SSH \xa0 是一種加密的網路傳輸協定, PuTTY 則是可用於 Windows 環境的 SSH 協定工具, 其中支援遠端登入 (putty.exe) 與檔案傳輸工具 (psftp.exe). \n 使用 PuTTY 所建立的公私鑰進行 Github push 認證的步驟: \n 第一步: \n 若希望在 Windows 環境透過 git 指令, 使用 PuTTY 設定的 session (一個代表連線伺服器主機、私鑰位置與是否使用代理主機等資訊的字串), 執行 push, 必須要在啟動可攜環境時, 設定 GIT_SSH 環境變數, 將此變數指向 PuTTY 套件中的 plink.exe 位置 (也就是 set GIT_SSH=%Disk%:\\putty\\plink.exe). \n 第二步: \n 指定利用 PuTTY 的 SSH session 執行 git push 後, 必須在 Windows 操作系統中選擇一個字串, 作為 SSH 連線 session 名稱, 由於此設定必須指向 SSH 協定加密用的私鑰所在目錄位置, 因此設定 session 之前, 必須利用 puttygen.txt 建立一對公私鑰, 其中的公鑰為 OpenSSH 格式, 必須送到使用者 Github 帳號設定區 (Settings) 的 SSH and GPG keys 中. \n 第三步: \n 利用 puttygen.exe 建立公私鑰的方法, 是在執行 puttygen.exe 之後, 以滑鼠按下 Generate 之後, 讓滑鼠在 puttgen.exe 視窗中 key 下方的空白區域隨意移動, puttygen.exe 會根據滑鼠移動的位置隨機建立 OpenSSH 格式的公鑰, 以及配對的 PuTTY 格式的 Private Key (副檔名為 .ppk) \n 第四步: \n 接下來, 將 OpenSSH 格式的 Public Key 內容複製到個人 Github 帳號設定區的 SSH and GPG keys 中, 並以 puttygen.exe 執行視窗右下方的 Save private key 按鈕, 將私鑰 (假設為 myprivatekey.ppk) 存至 Y:\\. \n 第五步: \n 接著啟動 PuTTY 中的 putty.exe, 在 Host Name (or IP Address) 欄位填入 github.com, 並確認 Connection Type 選用 SSH, 表示要透過 SSH 加密協定連線到 github.com. \n 第六步: \n 接著在 putty.exe 視窗下方的 Saved Sessions 填入一組字串, 此字串就是之後要遠端登入 github.com 設定 push 連線 URL 的 session 名稱, 在此假設選擇 "mysession" 作為 session 名稱, 使用者可以自行選擇具有代表性的字串, 例如: 學號或簡短的英文姓名縮寫. \n 第七步: \n 在 putty.exe 視窗中填入 github.com 與 "mysession" 名稱之後, 點擊 Save 之後, 此 session 設定就會被 Windows 操作系統存入該台電腦的 Registry 登錄檔案中的 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 所在組態區. 此時可以在命令列中輸入 regedit 後進入登錄檔查看是否 mysession 已經存在. \n 第八步: \n 上列 "mysession" 設定完成且按下 Save 之後, 若再按下 Open, 採用 IPv4 網路連線的電腦應該已經可以透過 putty.exe 遠端連線至 github.com, 視窗中會出現 github.com 作為視窗標題, 且內容為 login as: 但一般使用者並沒有帳號可以直接透過 putty.exe 遠端登入到 github.com, 而只能在 session 設定完成後, 利用此 session 執行 git push. \n 第九步: \n 由於前面的 "mysession" 雖然已經存入 Windows 操作系統的登錄檔, 但並沒有設定 private key 的位置, 因此接下來要再開啟 putty.exe, load 進此一 session, 然後在此 session 設定左方的 Category: 下方的 Connection - SSH - Auth - Credentials 設定中的 Private key file for authentication: 區, 利用 Browse 選擇位於 Y:\\ 的 myprivatekey.ppk 檔案. 選擇檔案完成後, 必須再回到 Catetory: 下方的 Session 區, 以右方的 Save 將附加私鑰位置設定的 session 存檔. 此時 Windows 登錄檔中的 "mysession" 除了代表要使用 SSH 連線到 github.com 之外, 還附帶指定了 myprivatekey.ppk 在 Y:\\ 的位置. \n 第十步: \n 若上述設定是在電腦輔助設計室中的電腦進行, 必須利用命令列 regedit 指令, 進入 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 位置, 利用滑鼠右鍵將此登錄設定檔案"匯出" 存入可攜程式 start_ipv6.bat 所在目錄, 此處假設命名為 mysession.reg, 使用者可以自行對 .reg 命名. \n 第十一步: \n 由於上列的 myprivatekey.ppk 存於可攜程式中的 Y:\\, 因此當使用者利用 start_ipv6.bat 啟動可攜程式後, 就可以利用滑鼠雙點擊位於同目錄的 mysession.reg, 上述的 "mysession" 設定就會存入 Windows 操作系統的登錄檔中. \n 使用 PuTTY session 設定倉儲 .git/config 中的 URL \n 假設上列 "mysession" 對應中的 OpenSSH 格式公鑰是送到 Github 帳號為 scrum-1 學員的 SSH and GPG key 區域, 則 scrum-1 學員在啟動可攜系統後, 已經雙點擊 mysession.reg, 將前述 putty.exe 設定的 session 組態登錄設定回存至 Windows 操作系統中, 則 scrum-1 學員就可以將其近端作業倉儲中的 mysession 用於倉儲 .git/config 檔案的下方設定: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n \n \n \n [remote  "origin" ] \n \xa0\xa0\xa0\xa0 url = git@mysession:mdewcm2025/hw-scrum-1.git \n \xa0\xa0\xa0\xa0 fetch = +refs/heads/:refs/remotes/origin/ \n \n \n \n \n \n \n \n 其中的 [remote "origin"] 表示當使用 git 指令中針對此倉儲 "origin" 是一個與遠端倉儲對應的字串代號, 代表其下兩項設定. url 代表此 "origin" 的倉儲連線網址, 而連線至此倉儲的協定是採遠端登入 (使用 Github 支援的 SSH 遠端登入協定), 且此遠端登入的帳號為 "git", 這是所有要使用 SSH 執行 git push 的用戶共同使用的登入帳號. \n url 設定中 "@" 之後的 "mysession" 就是宣告要使用此電腦登錄檔中所設定的 session 名稱 (代表要連線到 github.com, 且帶的 myprivatekey.ppk, 準備在登入流程中與 github.com 中 mdewcm2025 帳號下的 hw-scrum-1 倉儲擁有者 (或帶有 repo 管理權限的帳號) 所登錄的 public keys 進行認證比對, 一旦通過認證, git push 指令就可以成功將改版資料推送到指定的倉儲區域. \n', 'tags': '', 'url': 'task2.html'}, {'title': 'task2.5', 'text': 'brython.txt \n Fossil SCM 的應用 \n https://fossil-scm.org/ \xa0 \n fossil ui .fossil 後, 可以透過 Web ui 介面修改 .fossil 倉儲的內容, 至於從 fossil open .fossil 取出的 trunk 版本內容, 在倉儲內容改版後, 可以利用 fossil add 與 fossil commit-m 將改版資料回存至近端 .fossil, 若 .fossil 是從遠端 fossil clone, 則只有在 fossil push 後, 近端的改版內容才會被推向遠端倉儲 .fossil 檔案. \n \n 若與工作目錄對應的 .fossil 倉儲檔案內容在 fossil open 之後進行改版, 則先前已經 open 的工作目錄, 可以利用 fossil update 與近端的 .fossil 倉儲內容保持同步. \n', 'tags': '', 'url': 'task2.5.html'}, {'title': 'IPv6', 'text': '根據\xa0 1a_stud.txt \xa0中的學員序號, 每位學員分配一個固定的 IPv6 網址: \n 學員序號為 1的固定 IPv6 分配: 2001:288:6004:17:fff1:cc25:0000:a001 \n \n 固定 IPv6 與 Fossil SCM 結合使用: \n 利用 fossil init 建立一個空白的 wcm.fossil 資料庫, fossil 會使用目前登入的使用者帳號, 然後以亂數建立該帳號的對應密碼, 且讓此帳號作為資料庫的管理者. \n 由於 wcm.fossil 為 \xa0 SQLite \xa0 資料庫格式, 因此可以使用 sqlite3.exe 進入後, 利用 SQL 語法更改任何帳號的對應密碼. \n C:\\tmp>fossil init wcm.fossil \n \n C:\\tmp>fossil init wcm.fossil\nproject-id: 7a2ba6d35aa1be96a6fed38503023877a95eb2ab\nserver-id:\xa0 84002c6209d73504f02af0cd280ecba424e1c298\nadmin-user: yen (initial password is "3E9yhxzQtr")\n\xa0\nC:\\tmp>sqlite3 wcm.fossil\nSQLite version 3.49.0 2025-02-06 11:55:18\nEnter ".help" for usage hints.\nsqlite> update user set pw=\'yen\' where login=\'yen\';\nsqlite> \n \n C:\\tmp>fossil ui wcm.fossil \n 執行 fossil ui 後, 系統會自動跳出畫面 \n \n 之後希望將作業倉儲內容納入上列 wcm.fossil, 其操作步驟: \n C:\\tmp>git clone \xa0 https://github.com/mdewcm2025/hw-scrum-1.git \xa0wcmhw \n 可以將作業倉儲內容放入 wcmhw 目錄中. \n 接著要求將空的 wcm.fossil 倉儲的最新版 (名稱為 trunk) 強制解開到 wcmhw 目錄 \n C:\\tmp>cd wcmhw \n C:\\tmp\\wcmhw>fossil open ./../wcm.fossil --force \n 接下來只要利用 fossil add 與 commit 指令就可以將作業倉儲內容"新增提交"進入 wcm.fossil 倉儲的版本控制中. \n C:\\tmp\\wcmhw>fossil add . \n C:\\tmp\\wcmhw>fossil commit -m "add 作業倉儲內容" \n 然後回答 "a" 表示要將上列納入的所有資料進行提交, 而該提交版本內容將會註記在 wcm.fossil 倉儲中. \n C:\\tmp\\wcmhw>cd .. \n C:\\tmp>fossil ui wcm.fossil\xa0 \n 就可以利用全球資訊網介面 ( http://localhost:8081 ) 檢查 wcm.fossil 的最新版內容 \n 其中若進入 Admin - Settings, 在 default-csp 欄位填入" https://fonts.googleapis.com", \xa0在 ignore-glob 欄位填入 "__pycache__". \n default-csp 代表可以跨網站擷取 \xa0 https://fonts.googleapis.com \xa0網站中的字型資料檔案, 而 ignore-glob 表示之後若有執行 Python 程式所產生的暫存檔案, 可以忽略, 不會因為新增提交而進入倉儲資料中. \n 至於作業倉儲的ˋ靜態網站, 可以從\xa0 http://localhost:8081 /doc/trunk/index.html 進行檢視, 其中的 trunk 表示是該倉儲的最新版本. \n \n', 'tags': '', 'url': 'IPv6.html'}, {'title': 'task3', 'text': '使用 Nginx 建立全球資訊網伺服器 \n HTML 中的 CSS 與 Javascript \n Windows 環境中的 WWW server \n Ubuntu 環境中的 WWW server \n \n Windows: \n https://software.nfu.edu.tw/Windows/tw/Win_10_22H2.4_64BIT_Ch.ISO \n http://229.cycu.org/win10.vdi \xa0 \n 利用 nssm 將 nginx.exe 設為系統服務 \n 必須使用管理者的 cmd, 然後執行 nssm install nginx, nssm edit nginx, nssm remove nginx \n nginx.conf\xa0 \n \n #user\xa0 nobody;\nworker_processes\xa0 1;\n\xa0\n#error_log\xa0 logs/error.log;\n#error_log\xa0 logs/error.log\xa0 notice;\n#error_log\xa0 logs/error.log\xa0 info;\n\xa0\n#pid\xa0\xa0\xa0\xa0\xa0\xa0\xa0 logs/nginx.pid;\n\xa0\n\xa0\nevents {\n\xa0\xa0\xa0\xa0worker_connections\xa0 1024;\n}\n\xa0\nhttp {\n\xa0\xa0\xa0\xa0include\xa0\xa0\xa0\xa0\xa0\xa0 mime.types;\n\xa0\xa0\xa0\xa0default_type\xa0 application/octet-stream;\n\xa0\n\xa0\xa0\xa0\xa0sendfile\xa0\xa0\xa0\xa0\xa0\xa0\xa0 on;\n\xa0\xa0\xa0\xa0keepalive_timeout\xa0 65;\n\xa0\n\xa0\xa0\xa0\xa0server {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0# a0xx 中的 xx 為上課時的學員序號\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0# https://mdewcm2025.github.io/hw-scrum-1/downloads/1a_stud.txt\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0listen [2001:288:6004:17:fff1:cc25::a0xx]:80;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0# server_name\xa0 your-domain.com;\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0location / {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0root\xa0\xa0 html;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0index\xa0 index.html index.htm;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0error_page 404 /404.html;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0location = /40x.html {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0error_page 500 502 503 504 /50x.html;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0location = /50x.html {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}\n\xa0\xa0\xa0\xa0}\n} \n Windows 利用 \xa0 Letsencrypt \xa0 設定 https WWW 伺服器的套件工具: \xa0 certbot.7z \n 安裝 certbot 之後關閉 WWW 伺服器, 然後利用管理者啟動的 cmd 執行的: \n certbot certonly\xa0 --standalone \n 就可以取得 privkey.pem 與 fullchain.pem 等兩個網站的 https 數位簽章. \n 與 nginx 結合設定的 nginx.conf 如下: \n \n #user\xa0 nobody;\nworker_processes\xa0 1;\n\xa0\n#error_log\xa0 logs/error.log;\n#error_log\xa0 logs/error.log\xa0 notice;\n#error_log\xa0 logs/error.log\xa0 info;\n\xa0\n#pid\xa0\xa0\xa0\xa0\xa0\xa0\xa0 logs/nginx.pid;\n\xa0\nevents {\n\xa0\xa0\xa0\xa0worker_connections\xa0 1024;\n}\n\xa0\nhttp {\n\xa0\xa0\xa0\xa0include\xa0\xa0\xa0\xa0\xa0\xa0 mime.types;\n\xa0\xa0\xa0\xa0default_type\xa0 application/octet-stream;\n\xa0\n\xa0\xa0\xa0\xa0sendfile\xa0\xa0\xa0\xa0\xa0\xa0\xa0 on;\n\xa0\xa0\xa0\xa0keepalive_timeout\xa0 65;\n\xa0\n\xa0\xa0\xa0\xa0# Redirect HTTP to HTTPS\n\xa0\xa0\xa0\xa0server {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0listen [2001:288:6004:17:fff1:cc25::a099]:80;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0server_name\xa0 w99.mde.nfu.edu.tw;\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return 301 https://$host$request_uri;\n\xa0\xa0\xa0\xa0}\n\xa0\n\xa0\xa0\xa0\xa0# HTTPS server\n\xa0\xa0\xa0\xa0server {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0listen [2001:288:6004:17:fff1:cc25::a099]:443 ssl;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0server_name w99.mde.nfu.edu.tw;\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0ssl_certificate\xa0\xa0\xa0\xa0\xa0 C:/Certbot/live/w99.mde.nfu.edu.tw/fullchain.pem;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0ssl_certificate_key\xa0 C:/Certbot/live/w99.mde.nfu.edu.tw/privkey.pem;\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0ssl_protocols\xa0\xa0\xa0\xa0\xa0\xa0\xa0 TLSv1.2 TLSv1.3;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0ssl_ciphers\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 HIGH:!aNULL:!MD5;\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0location / {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0root\xa0\xa0 html;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0index\xa0 index.html index.htm;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0error_page 404 /404.html;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0location = /40x.html {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0error_page 500 502 503 504 /50x.html;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0location = /50x.html {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}\n\xa0\xa0\xa0\xa0}\n} \n 在 Windows 利用 nssm 將 nginx 的啟動設為系統服務: \n 在管理者權限下執行 cmd (nssm 必須提供位於實體目錄下的 nssm.exe): \n nssm install nginx \n 編輯 nginx 服務: \n nssm edit nginx \n 檢視或管理系統服務: \n 以滑鼠右鍵點選"開始"後, 選擇"電腦管理", 即可開啟系統的"服務與應用程式" \n \n 將\xa0 https://github.com/mdecycu/reeborg.git \xa0設為作業倉儲的 submodule (子模組) 的指令: \n cd wcmhw (確定執行目錄為作業倉儲) \n git submodule add \xa0 https://github.com/mdecycu/reeborg.git \xa0reeborg \n 表示要將\xa0 https://github.com/mdecycu/reeborg.git \xa0設為子模組, 且命名為 reeborg \n \n Ubuntu: \n ubuntu-24.04.2-live-server-amd64.iso \n http://229.cycu.org/ubuntu.vdi \xa0 \n Virtualbox: \n VirtualBox-7.1.6-167084-Win.exe \n Portable-Virtualbox.7z \n 在同一個 Virtualbox 設定下, 使用同一個 .vdi, 必須要先修改其 UUID: \n "C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage" internalcommands sethduuid c:\\users\\yen\\downloads\\win10.vdi \n \n \n', 'tags': '', 'url': 'task3.html'}, {'title': 'task4', 'text': '配置 Reeborg 網際系統 \n 解析 Reeborg 系統架構 \n 網際內容管理中的 Reeborg \n', 'tags': '', 'url': 'task4.html'}, {'title': 'Homework', 'text': "1. 作業 (40%): 從 Github Classroom 取得的個人倉儲與網站, 每週必須至少提交 2 次與課程進度有關的內容. \n 作業一 (20%): 採用  nginx  建立全球資訊網伺服器 \n 在 Windows 操作系統中建立一台 WWW 伺服器 \n 在 Ubuntu 操作系統建立一台 WWW 伺服器 \n 在 虛擬主機上建立一台 WWW 伺服器 (Windows and Ubuntu) \n Virtualbox \n Vmware  最近宣布 適用於 Windows 及 Linux 的 Vmware Workstation Pro ( 17.6 ), 與適用於 MacOS 的 Vmware Fusion Pro 全面免費. \n 下載 Vmware Workstation Pro  (For Windows and Linux) - 註冊帳號後下載 VMware-workstation-full-17.6.2.exe \n 下載 Vmware Fusion Pro  (For Mac) - 註冊帳號後下載 \n 作業二 (20%): 在各種不同環境下的操作系統中配置  Reeborg's world \xa0( 原始碼 ) \n", 'tags': '', 'url': 'Homework.html'}, {'title': 'HW1', 'text': '作業一 (20%): 採用  nginx  建立全球資訊網伺服器 \n 在 Windows 操作系統中建立一台 WWW 伺服器 \n 在 Ubuntu 操作系統建立一台 WWW 伺服器 \n 在 虛擬主機上建立一台 WWW 伺服器 (Windows and Ubuntu) \n Virtualbox \n Vmware  最近宣布 適用於 Windows 及 Linux 的 Vmware Workstation Pro ( 17.6 ), 與適用於 MacOS 的 Vmware Fusion Pro 全面免費. \n 下載 Vmware Workstation Pro  (For Windows and Linux) - 註冊帳號後下載 VMware-workstation-full-17.6.2.exe \n 下載 Vmware Fusion Pro  (For Mac) - 註冊帳號後下載 \n 利用 \xa0 https://mde.tw/wcm2025/content/IPv6.html \xa0 中所分配的 IPv6 網址建立 Windows 與 Ubuntu 主機, 配置 nginx 伺服器. \n http://229.cycu.org/win10.vdi \xa0 \n http://229.cycu.org/ubuntu.vdi \xa0 \n \n 啟動 Nginx: 執行 nginx.exe, 會按照 conf/nginx.conf 中的設定內容啟動 \n 關閉 Nginx: 在命令列視窗中執行 taskkill /IM nginx.exe /F \n 設定 nginx 服務: nssm install nginx \n 編輯 nginx 服務: nssm edit nginx \n certbot.7z 指令: certbot certonly --standalone \n 對 AI 提問與 Windows 環境下 nginx.conf 設定檔案的內容: \n 在 Windows 已知僅支援 IPv6 網路協定, 且伺服器名稱為 server.mde.nfu.edu.tw, https 簽章檔案位於 nginx 的 conf 目錄中, 名稱分別為 fullchain.pem 與 privkey.pem, 其中希望 port 80 單獨伺服 html 目錄, 但是 https port 443 則其內容是從 port 8080 的 localhost 由 waitress 所提供, 請提供 nginx conf 目錄中的 nginx.conf 完整設定檔案內容. \n 上述問句取得的 \xa0 nginx.conf \n 用來啟動動態網站編輯的 waitress 伺服器檔案 start_waitress.py 內容: \xa0 start_waitress.py \n \n 取得 IPv6 位置與符號名稱的認證對應 \n 若希望透過 \xa0 LetsEncrypt \xa0 進行符號名稱認證, 必須下載 \xa0 certbot.7z , 然後在命令列視窗, 以管理者身分執行 certbot certonly --standalone \n \n 操作步驟 (Windows): \n \n 下載 \xa0 http://229.cycu.org/win10.vdi , 在電腦中啟動 Virtualbox 後新增虛擬主機. \n 採用 win10.vdi 建立虛擬主機後, 將網路設為橋接後啟動. \n 登入後進入控制台利用個人的 IPv6 網址設定網路連線後, 在虛擬主機中下載安裝 \xa0 nginx \xa0 後測試是否可以正常從實體主機中連線. \n http://229.cycu.org/certbot.7z \xa0設定 https \n git clone\xa0 https://github.com/mdecycu/reeborg.git \xa0放入 nginx 系統中的 html 目錄 \n 利用\xa0 http://localhost/reeborg/?lang=en&mode=python&menu=/reeborg/worlds/menus/select_collection_en.json&name=Alone&url=/reeborg/worlds/tutorial_en/harvest1.json&editor=https://mdewcm2025.github.io/hw-scrum-1/python/harvest1.py \xa0進行測試. \n 就機械設計的專業而言, 之後可以用來開發類似:\xa0 https://github.com/youandvern/efficalc \xa0 \n \n 操作步驟 (Ubuntu): \n \n 下載 \xa0 http://229.cycu.org/ubuntu.vdi , 在電腦中啟動 Virtualbox 後新增虛擬主機. \n 採用 Ubuntu.vdi 建立虛擬主機後, 將網路設為橋接後啟動. \n 登入後進入控制台利用個人的 IPv6 網址設定網路連線後, 在虛擬主機中下載安裝 \xa0 nginx \xa0 後測試是否可以正常從實體主機中連線. (例如: \xa0 http://stud.cycu.org/ ) \n Ubuntu 網路設定位於 /etc/netplan/ net.yaml , 利用 vi 編輯器設定完成後, 以 sudo netplan apply 讓設定生效. \n 安裝 nginx, sudo apt install nginx, 之後設定檔案位於 /etc/nginx/sites-available/ default \n 修改 nginx 設定後, 以 sudo service nginx restart 重新啟動. (測試是否可以連線至: http://wxx.mde.nfu.edu.tw 或 https://wxx.mde.nfu.edu.tw) \n \n 建立 github_帳號.github.io 倉儲與網站: \n \n 在 Github 中建立以帳號為名的 github.io, 將自動啟動 Github Pages 設定 (自動設定為與倉儲同名的網站) \n 登入 Github 後, 連線至 \xa0 https://github.com/mdecycu/cmsimde_site, \xa0 Use this template 建立名稱為 github_帳號.github.io 倉儲. \n 在 Codespaces 或近端維護 github_帳號.github.io (例如: scrum-1.github.io). \n 在個人網站中建立 About, Courses, Certificates, Licenses, Contests, Misc 等 H1 頁面, 其中 About 可以放入個人簡介, Courses 則放入個人所修過課程的簡介與心得 (或成績), Certificates 放入各式英檢的內容, Licenses 則放入專業證照與實習項目介紹. Contests 則放入個人或團隊參賽紀錄. Misc 則放入尚未整理的瑣碎資料. \n 個人網頁中的 Blog 可以詳細記錄個人參與的事件過程, Reveal.js 則放入個人的線上簡報內容 \n \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'nginx', 'text': '設置nginx方法 Step 1 下載certbote然後解壓縮到C槽(因為之後用不到） 在C槽裡面會看到 programfiles>Certbot>pkgs>certbot>tests>testdata>sample_archive> fullchain1.pem、privkey1.pem \n \n Step 2 \n 把這兩個檔案拉到nginx1.26.3中的 「conf」 裡面 把兩個檔案的 1 這個數字 刪除', 'tags': '', 'url': 'nginx.html'}, {'title': 'HW2', 'text': "作業二 (20%): 在各種不同環境下的操作系統中配置  Reeborg's world \xa0( 原始碼 ) \n", 'tags': '', 'url': 'HW2.html'}, {'title': 'Midterm', 'text': "2. 期中協同專案執行、簡報與報告 (三人一組) (30%) \n 專案題目: 利用 Copilot 解析  Reeborg's world \xa0( 原始碼 ) \n", 'tags': '', 'url': 'Midterm.html'}, {'title': 'Final', 'text': "3. 期末協同專案執行、簡報與報告\xa0(三人一組) (30%) \n 專案題目: 網際內容管理架構下的  Reeborg's world \xa0( 原始碼 ) \n 利用 uwsgi 配置分組學員執行 cmsimde 動態內容管理系統編輯 \n 設法將  Reeborg's world \xa0( 原始碼 ) 與 cmsimde 網際內容管理系統整合 \n", 'tags': '', 'url': 'Final.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n iv2"> \n  editor2 結束  \n', 'tags': '', 'url': 'Brython.html'}]};